// Zed settings
//
// For information on how to configure Zed, see the Zed
// documentation: https://zed.dev/docs/configuring-zed
//
// To see all of Zed's default settings without changing your
// custom settings, run `zed: open default settings` from the
// command palette (cmd-shift-p / ctrl-shift-p)

{
  "show_edit_predictions": false,
  "theme": {
    "mode": "dark",
    "light": "One Light",
    "dark": "Tokyo Night"
  },
  // Features that can be globally enabled or disabled
  "features": {
    "edit_prediction_provider": "supermaven"
  },
  "buffer_font_size": 28,
  "ui_font_size": 20,
  // The direction that you want to split panes horizontally. Defaults to "up"
  "pane_split_direction_horizontal": "up",
  // The direction that you want to split panes horizontally. Defaults to "left"
  "pane_split_direction_vertical": "left",
  "vim_mode": true,
  // Whether to show the informational hover box when moving the mouse
  // over symbols in the editor.
  "hover_popover_enabled": true,
  // Time to wait before showing the informational hover box
  "hover_popover_delay": 350,
  // Whether to confirm before quitting Zed.
  "confirm_quit": true,
  // Whether to restore last closed project when fresh Zed instance is opened.
  "restore_on_startup": "last_session",
  // Show method signatures in the editor, when inside parentheses.
  "auto_signature_help": true,
  // Whether to use additional LSP queries to format (and amend) the code after
  // every "trigger" symbol input, defined by LSP server capabilities.
  "use_on_type_format": true,
  // Whether to automatically add matching closing characters when typing
  // opening parenthesis, bracket, brace, single or double quote characters.
  // For example, when you type (, Zed will add a closing ) at the correct position.
  "use_autoclose": true,
  // Whether to automatically surround selected text when typing opening parenthesis,
  // bracket, brace, single or double quote characters.
  // For example, when you select text and type (, Zed will surround the text with ().
  "use_auto_surround": true,
  // Whether indentation of pasted content should be adjusted based on the context.
  "auto_indent_on_paste": true,
  // Controls how the editor handles the autoclosed characters.
  // When set to `false`(default), skipping over and auto-removing of the closing characters
  // happen only for auto-inserted characters.
  // Otherwise(when `true`), the closing characters are always skipped over and auto-removed
  // no matter how they were inserted.
  "always_treat_brackets_as_autoclosed": false,
  // Whether to show tabs and spaces in the editor.
  // This setting can take four values:
  //
  // 1. Draw tabs and spaces only for the selected text (default):
  //    "selection"
  // 2. Do not draw any tabs or spaces:
  //    "none"
  // 3. Draw all invisible symbols:
  //    "all"
  // 4. Draw whitespaces at boundaries only:
  //    "boundary"
  // For a whitespace to be on a boundary, any of the following conditions need to be met:
  // - It is a tab
  // - It is adjacent to an edge (start or end)
  // - It is adjacent to a whitespace (left or right)
  "show_whitespaces": "selection",
  // Enable middle-click paste on Linux.
  "middle_click_paste": false,
  // Whether the editor will scroll beyond the last line.
  "scroll_beyond_last_line": "one_page",
  // The number of lines to keep above/below the cursor when scrolling.
  "vertical_scroll_margin": 3,
  // Whether to scroll when clicking near the edge of the visible text area.
  "autoscroll_on_clicks": false,
  // The number of characters to keep on either side when scrolling with the mouse
  "horizontal_scroll_margin": 5,
  // Scroll sensitivity multiplier. This multiplier is applied
  // to both the horizontal and vertical delta values while scrolling.
  "scroll_sensitivity": 1.0,
  "relative_line_numbers": false,
  // If 'search_wrap' is disabled, search result do not wrap around the end of the file.
  "search_wrap": true,
  // Search options to enable by default when opening new project and buffer searches.
  "search": {
    "whole_word": false,
    "case_sensitive": false,
    "include_ignored": false,
    "regex": false
  },
  // When to populate a new search's query based on the text under the cursor.
  // This setting can take the following three values:
  //
  // 1. Always populate the search query with the word under the cursor (default).
  //    "always"
  // 2. Only populate the search query when there is text selected
  //    "selection"
  // 3. Never populate the search query
  //    "never"
  "seed_search_query_from_cursor": "always",
  // When enabled, automatically adjusts search case sensitivity based on your query.
  // If your search query contains any uppercase letters, the search becomes case-sensitive;
  // if it contains only lowercase letters, the search becomes case-insensitive.
  "use_smartcase_search": false,
  // Inlay hint related settings
  "inlay_hints": {
    // Global switch to toggle hints on and off, switched off by default.
    "enabled": false,
    // Toggle certain types of hints on and off, all switched on by default.
    "show_type_hints": true,
    "show_parameter_hints": true,
    // Corresponds to null/None LSP hint type value.
    "show_other_hints": true,
    // Whether to show a background for inlay hints.
    //
    // If set to `true`, the background will use the `hint.background` color from the current theme.
    "show_background": false,
    // Time to wait after editing the buffer, before requesting the hints,
    // set to 0 to disable debouncing.
    "edit_debounce_ms": 700,
    // Time to wait after scrolling the buffer, before requesting the hints,
    // set to 0 to disable debouncing.
    "scroll_debounce_ms": 50,
    /// A set of modifiers which, when pressed, will toggle the visibility of inlay hints.
    /// If the set if empty or not all the modifiers specified are pressed, inlay hints will not be toggled.
    "toggle_on_modifiers_press": {
      "control": false,
      "shift": false,
      "alt": false,
      "platform": false,
      "function": false
    }
  },
  "project_panel": {
    // Whether to show the project panel button in the status bar
    "button": true,
    // Default width of the project panel.
    "default_width": 240,
    // Where to dock the project panel. Can be 'left' or 'right'.
    "dock": "left",
    // Spacing between worktree entries in the project panel. Can be 'comfortable' or 'standard'.
    "entry_spacing": "comfortable",
    // Whether to show file icons in the project panel.
    "file_icons": true,
    // Whether to show folder icons or chevrons for directories in the project panel.
    "folder_icons": true,
    // Whether to show the git status in the project panel.
    "git_status": true,
    // Amount of indentation for nested items.
    "indent_size": 20,
    // Whether to reveal it in the project panel automatically,
    // when a corresponding project entry becomes active.
    // Gitignored entries are never auto revealed.
    "auto_reveal_entries": true,
    // Whether to fold directories automatically and show compact folders
    // (e.g. "a/b/c" ) when a directory has only one subdirectory inside.
    "auto_fold_dirs": true,
    // Scrollbar-related settings
    "scrollbar": {
      // When to show the scrollbar in the project panel.
      // This setting can take five values:
      ///
      // 1. null (default): Inherit editor settings
      // 2. Show the scrollbar if there's important information or
      //    follow the system's configured behavior (default):
      //   "auto"
      // 3. Match the system's configured behavior:
      //    "system"
      // 4. Always show the scrollbar:
      //    "always"
      // 5. Never show the scrollbar:
      //    "never"
      "show": null
    },
    // Which files containing diagnostic errors/warnings to mark in the project panel.
    // This setting can take the following three values:
    ///
    // 1. Do not mark any files:
    //    "off"
    // 2. Only mark files with errors:
    //    "errors"
    // 3. Mark files with errors and warnings:
    //    "all"
    "show_diagnostics": "all",
    // Settings related to indent guides in the project panel.
    "indent_guides": {
      // When to show indent guides in the project panel.
      // This setting can take two values:
      //
      // 1. Always show indent guides:
      //    "always"
      // 2. Never show indent guides:
      //    "never"
      "show": "always"
    }
  },
  "outline_panel": {
    // Whether to show the outline panel button in the status bar
    "button": true,
    // Default width of the outline panel.
    "default_width": 300,
    // Where to dock the outline panel. Can be 'left' or 'right'.
    "dock": "left",
    // Whether to show file icons in the outline panel.
    "file_icons": true,
    // Whether to show folder icons or chevrons for directories in the outline panel.
    "folder_icons": true,
    // Whether to show the git status in the outline panel.
    "git_status": true,
    // Amount of indentation for nested items.
    "indent_size": 20,
    // Whether to reveal it in the outline panel automatically,
    // when a corresponding outline entry becomes active.
    // Gitignored entries are never auto revealed.
    "auto_reveal_entries": true,
    // Whether to fold directories automatically
    // when a directory has only one directory inside.
    "auto_fold_dirs": true,
    // Settings related to indent guides in the outline panel.
    "indent_guides": {
      // When to show indent guides in the outline panel.
      // This setting can take two values:
      //
      // 1. Always show indent guides:
      //    "always"
      // 2. Never show indent guides:
      //    "never"
      "show": "always"
    },
    // Scrollbar-related settings
    "scrollbar": {
      // When to show the scrollbar in the project panel.
      // This setting can take five values:
      ///
      // 1. null (default): Inherit editor settings
      // 2. Show the scrollbar if there's important information or
      //    follow the system's configured behavior (default):
      //   "auto"
      // 3. Match the system's configured behavior:
      //    "system"
      // 4. Always show the scrollbar:
      //    "always"
      // 5. Never show the scrollbar:
      //    "never"
      "show": null
    }
  },
  "collaboration_panel": {
    // Whether to show the collaboration panel button in the status bar.
    "button": true,
    // Where to dock the collaboration panel. Can be 'left' or 'right'.
    "dock": "left",
    // Default width of the collaboration panel.
    "default_width": 240
  },
  "chat_panel": {
    // When to show the chat panel button in the status bar.
    // Can be 'never', 'always', or 'when_in_call',
    // or a boolean (interpreted as 'never'/'always').
    "button": "when_in_call",
    // Where to the chat panel. Can be 'left' or 'right'.
    "dock": "right",
    // Default width of the chat panel.
    "default_width": 240
  },
  "git_panel": {
    // Whether to show the git panel button in the status bar.
    "button": true,
    // Where to the git panel. Can be 'left' or 'right'.
    "dock": "left",
    // Default width of the git panel.
    "default_width": 360,
    // Style of the git status indicator in the panel.
    //
    // Default: icon
    "status_style": "icon",
    // What branch name to use if init.defaultBranch
    // is not set
    //
    // Default: main
    "fallback_branch_name": "main",

    "scrollbar": {
      // When to show the scrollbar in the git panel.
      //
      // Default: inherits editor scrollbar settings
      "show": null
    }
  },
  "message_editor": {
    // Whether to automatically replace emoji shortcodes with emoji characters.
    // For example: typing `:wave:` gets replaced with `👋`.
    "auto_replace_emoji_shortcode": true
  },
  "notification_panel": {
    // Whether to show the notification panel button in the status bar.
    "button": true,
    // Where to dock the notification panel. Can be 'left' or 'right'.
    "dock": "right",
    // Default width of the notification panel.
    "default_width": 380
  },
  "assistant": {
    // Version of this setting.
    "version": "2",
    // Whether the assistant is enabled.
    "enabled": true,
    // Whether to show the assistant panel button in the status bar.
    "button": true,
    // Where to dock the assistant panel. Can be 'left', 'right' or 'bottom'.
    "dock": "right",
    // Default width when the assistant is docked to the left or right.
    "default_width": 640,
    // Default height when the assistant is docked to the bottom.
    "default_height": 320,
    // The default model to use when creating new chats.
    "default_model": {
      // The provider to use.
      "provider": "zed.dev",
      // The model to use.
      "model": "claude-3-5-sonnet-latest"
    },
    // The model to use when applying edits from the assistant.
    "editor_model": {
      // The provider to use.
      "provider": "zed.dev",
      // The model to use.
      "model": "claude-3-5-sonnet-latest"
    }
  },
  // The settings for slash commands.
  "slash_commands": {
    // Settings for the `/docs` slash command.
    "docs": {
      // Whether `/docs` is enabled.
      "enabled": false
    },
    // Settings for the `/project` slash command.
    "project": {
      // Whether `/project` is enabled.
      "enabled": false
    }
  },
  // Whether the screen sharing icon is shown in the os status bar.
  "show_call_status_icon": true,
  // Whether to use language servers to provide code intelligence.
  "enable_language_server": true,
  // Whether to perform linked edits of associated ranges, if the language server supports it.
  // For example, when editing opening <html> tag, the contents of the closing </html> tag will be edited as well.
  "linked_edits": true,
  // The list of language servers to use (or disable) for all languages.
  //
  // This is typically customized on a per-language basis.
  "language_servers": ["..."],
  // "autosave": { "after_delay": { "milliseconds": 1000 } },
  // Settings related to the editor's tab bar.
  "tab_bar": {
    // Whether or not to show the tab bar in the editor
    "show": true,
    // Whether or not to show the navigation history buttons.
    "show_nav_history_buttons": true,
    // Whether or not to show the tab bar buttons.
    "show_tab_bar_buttons": true
  },
  // Settings related to the editor's tabs
  "tabs": {
    // Show git status colors in the editor tabs.
    "git_status": true,
    // Position of the close button on the editor tabs.
    // One of: ["right", "left", "hidden"]
    "close_position": "right",
    // Whether to show the file icon for a tab.
    "file_icons": true,
    // Controls the appearance behavior of the tab's close button.
    //
    // 1. Show it just upon hovering the tab. (default)
    //     "hover"
    // 2. Show it persistently.
    //     "always"
    // 3. Never show it, even if hovering it.
    //     "hidden"
    "show_close_button": "hover",
    // What to do after closing the current tab.
    //
    // 1. Activate the tab that was open previously (default)
    //     "history"
    // 2. Activate the right neighbour tab if present
    //     "neighbour"
    // 3. Activate the left neighbour tab if present
    //     "left_neighbour"
    "activate_on_close": "history",
    // Which files containing diagnostic errors/warnings to mark in the tabs.
    // Diagnostics are only shown when file icons are also active.
    // This setting only works when can take the following three values:
    ///
    // 1. Do not mark any files:
    //    "off"
    // 2. Only mark files with errors:
    //    "errors"
    // 3. Mark files with errors and warnings:
    //    "all"
    "show_diagnostics": "off"
  },
  // Settings related to preview tabs.
  "preview_tabs": {
    // Whether preview tabs should be enabled.
    // Preview tabs allow you to open files in preview mode, where they close automatically
    // when you switch to another file unless you explicitly pin them.
    // This is useful for quickly viewing files without cluttering your workspace.
    "enabled": true,
    // Whether to open tabs in preview mode when selected from the file finder.
    "enable_preview_from_file_finder": false,
    // Whether a preview tab gets replaced when code navigation is used to navigate away from the tab.
    "enable_preview_from_code_navigation": false
  },
  // Whether or not to remove any trailing whitespace from lines of a buffer
  // before saving it.
  "remove_trailing_whitespace_on_save": true,
  // Whether to start a new line with a comment when a previous line is a comment as well.
  "extend_comment_on_newline": true,
  // Removes any lines containing only whitespace at the end of the file and
  // ensures just one newline at the end.
  "ensure_final_newline_on_save": true,
  "format_on_save": "on",
  "soft_wrap": "editor_width",
  // Diagnostics configuration.
  "diagnostics": {
    // Whether to show warnings or not by default.
    "include_warnings": true,
    // Settings for inline diagnostics
    "inline": {
      // Whether to show diagnostics inline or not
      "enabled": true,
      // The delay in milliseconds to show inline diagnostics after the
      // last diagnostic update.
      "update_debounce_ms": 150,
      // The amount of padding between the end of the source line and the start
      // of the inline diagnostic in units of em widths.
      "padding": 4,
      // The minimum column to display inline diagnostics. This setting can be
      // used to horizontally align inline diagnostics at some column. Lines
      // longer than this value will still push diagnostics further to the right.
      "min_column": 0,
      // The minimum severity of the diagnostics to show inline.
      // Shows all diagnostics when not specified.
      "max_severity": null
    }
  },
  // The extensions that Zed should automatically install on startup.
  //
  // If you don't want any of these extensions, add this field to your settings
  // and change the value to `false`.
  "auto_install_extensions": {
    "docker-compose": true,
    "dockerfile": true,
    "html": true,
    "ocaml": true,
    "tokyo-night": true
  },
  // Different settings for specific languages.
  "languages": {
    "Astro": {
      "language_servers": ["astro-language-server", "..."],
      "prettier": {
        "allowed": true,
        "plugins": ["prettier-plugin-astro"]
      }
    },
    "Blade": {
      "prettier": {
        "allowed": true
      }
    },
    "C": {
      // "format_on_save": "off",
      "use_on_type_format": false,
      "prettier": {
        "allowed": false
      }
    },
    "C++": {
      // "format_on_save": "off",
      "use_on_type_format": false,
      "prettier": {
        "allowed": false
      }
    },
    "CSS": {
      "prettier": {
        "allowed": true
      }
    },
    "Dart": {
      "tab_size": 2
    },
    "Diff": {
      "show_edit_predictions": false,
      "remove_trailing_whitespace_on_save": false,
      "ensure_final_newline_on_save": false
    },
    "Elixir": {
      "language_servers": ["elixir-ls", "!next-ls", "!lexical", "..."]
    },
    "Erlang": {
      "language_servers": ["erlang-ls", "!elp", "..."]
    },
    "Git Commit": {
      "allow_rewrap": "anywhere"
    },
    "Go": {
      "code_actions_on_format": {
        "source.organizeImports": true
      }
    },
    "GraphQL": {
      "prettier": {
        "allowed": true
      }
    },
    "HEEX": {
      "language_servers": ["elixir-ls", "!next-ls", "!lexical", "..."]
    },
    "HTML": {
      "prettier": {
        "allowed": true
      }
    },
    "Java": {
      "prettier": {
        "allowed": true,
        "plugins": ["prettier-plugin-java"]
      }
    },
    "JavaScript": {
      "language_servers": ["!typescript-language-server", "vtsls", "..."],
      "prettier": {
        "allowed": true
      }
    },
    "JSON": {
      "prettier": {
        "allowed": true
      }
    },
    "JSONC": {
      "prettier": {
        "allowed": true
      }
    },
    "Markdown": {
      "format_on_save": "off",
      "use_on_type_format": false,
      "allow_rewrap": "anywhere",
      "soft_wrap": "bounded",
      "prettier": {
        "allowed": true
      }
    },
    "PHP": {
      "language_servers": ["phpactor", "!intelephense", "..."],
      "prettier": {
        "allowed": true,
        "plugins": ["@prettier/plugin-php"],
        "parser": "php"
      }
    },
    "Plain Text": {
      "allow_rewrap": "anywhere"
    },
    "Ruby": {
      "language_servers": ["solargraph", "!ruby-lsp", "!rubocop", "..."]
    },
    "SCSS": {
      "prettier": {
        "allowed": true
      }
    },
    "SQL": {
      "prettier": {
        "allowed": true,
        "plugins": ["prettier-plugin-sql"]
      }
    },
    "Starlark": {
      "language_servers": ["starpls", "!buck2-lsp", "..."]
    },
    "Svelte": {
      "language_servers": ["svelte-language-server", "..."],
      "prettier": {
        "allowed": true,
        "plugins": ["prettier-plugin-svelte"]
      }
    },
    "TSX": {
      "language_servers": ["!typescript-language-server", "vtsls", "..."],
      "prettier": {
        "allowed": true
      }
    },
    "Twig": {
      "prettier": {
        "allowed": true
      }
    },
    "TypeScript": {
      "language_servers": ["!typescript-language-server", "vtsls", "..."],
      "prettier": {
        "allowed": true
      }
    },
    "Vue.js": {
      "language_servers": ["vue-language-server", "..."],
      "prettier": {
        "allowed": true
      }
    },
    "XML": {
      "prettier": {
        "allowed": true,
        "plugins": ["@prettier/plugin-xml"]
      }
    },
    "YAML": {
      "prettier": {
        "allowed": true
      }
    },
    "Zig": {
      "language_servers": ["zls", "..."]
    }
  },
  // Zed's Prettier integration settings.
  // Allows to enable/disable formatting with Prettier
  // and configure default Prettier, used when no project-level Prettier installation is found.
  "prettier": {
    // // Whether to consider prettier formatter or not when attempting to format a file.
    // "allowed": false,
    //
    // // Use regular Prettier json configuration.
    // // If Prettier is allowed, Zed will use this for its Prettier instance for any applicable file, if
    // // the project has no other Prettier installed.
    // "plugins": [],
    //
    // // Use regular Prettier json configuration.
    // // If Prettier is allowed, Zed will use this for its Prettier instance for any applicable file, if
    // // the project has no other Prettier installed.
    // "trailingComma": "es5",
    // "tabWidth": 4,
    // "semi": false,
    // "singleQuote": true
  },
  // LSP Specific settings.
  "lsp": {
    // Specify the LSP name as a key here.
    // "rust-analyzer": {
    //     // These initialization options are merged into Zed's defaults
    //     "initialization_options": {
    //         "check": {
    //             "command": "clippy" // rust-analyzer.check.command (default: "check")
    //         }
    //     }
    // }
  },
  // Jupyter settings
  "jupyter": {
    "enabled": true
    // Specify the language name as the key and the kernel name as the value.
    // "kernel_selections": {
    //    "python": "conda-base"
    //    "typescript": "deno"
    // }
  },
  // Vim settings
  "vim": {
    "default_mode": "normal",
    "toggle_relative_line_numbers": true,
    "use_system_clipboard": "always",
    "use_multiline_find": false,
    "use_smartcase_find": true,
    "highlight_on_yank_duration": 200,
    "custom_digraphs": {}
  }
}
